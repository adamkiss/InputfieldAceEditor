<?php

/**
 * Better ProcessWire text editor for developers and at least 'a little' tech savvy clients
 */
class InputfieldAceEditor extends InputfieldTextarea {

	private $path = false;
	protected $modes = array(
			'text' => 'Text',
			'html' => 'HTML',
			'textile' => 'Textile',
			'markdown' => 'Markdown'
		);

	public static function getModuleInfo() {
		return array(
				'title' => 'ACE Editor',
				'version' => 110,
				'summary' => 'Better ProcessWire text editor for developers and at least ‘a little’ tech savvy clients'
			);
	}

	public function ___render() {
		$this->config->scripts->add($this->config->urls->InputfieldAceEditor .'/ace/ace.js');

		$config = $this->config->js($this->className());
		if( $config === null )
			$config = array();

		$config[] = array(
			'id' => $this->attr('id'),
			'mode' => $this->findMode(),
			'rows' => $this->rows,
		);

		$this->config->js($this->className(), $config);

		return parent::___render();
	}

	public function ___getConfigInputfields() {
		$inputfields = parent::___getConfigInputfields();

		$field = wire('fields')->get($this->attr('name'));

		$wrapper = $this->modules->get('InputfieldFieldset');
		$wrapper->label = $this->_('ACE Editor: Visual features');
		$wrapper->description = $this->_('Visual features of ACE Editor, such as invisible characters or focus mode');
		$wrapper->collapsed = Inputfield::collapsedNo;

		$value = $field->mode;
		$field = $this->modules->get('InputfieldSelect');
		$field->attr('name', 'mode');
		$field->label = 'ACE Editor Mode';
		$field->description = _('This is the syntax mode you use in this field.');
		foreach($this->modes as $mode => $label) {
			$selected = $value === $mode ? array('selected' => 'selected') : null;
			$field->addOption($mode, $label, $selected);
		}
		$wrapper->append($field);

		$inputfields->append($wrapper);
		return $inputfields;
	}

	public function ___install() {
		if(ProcessWire::versionMajor == 2 && ProcessWire::versionMinor < 2) {
			throw new WireException('This module requires ProcessWire 2.2 or newer');
		}
	}

	private function findMode() {
		$field = wire('fields')->get($this->attr('name'));
		if( $field->mode )
			return $field->mode;
		$mode = 'text';
		if( $field && $field->textformatters )
			foreach($field->textformatters as $class_name)
				if( (preg_match('/textile|markdown/i', $class_name, $matches)) === 1 ) {
					$mode = strtolower($matches[0]);
					continue;
				}
		return $mode;
	}

}
